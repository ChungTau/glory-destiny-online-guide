services:
  # 基礎服務，只建構工具環境
  base:
    build:
      context: .
      dockerfile: Dockerfile.base
    image: gdo-guide-base:latest

  # Prisma 共用基礎服務
  prisma-base:
    build:
      context: .
      dockerfile: Dockerfile.prisma-base
    image: gdo-guide-prisma-base:latest
    depends_on:
      - base

  # UI 共用基礎服務
  ui-base:
    build:
      context: .
      dockerfile: Dockerfile.ui-base
    image: gdo-guide-ui-base:latest
    depends_on:
      - base

  # Postgres 數據庫
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - postgres_data:/var/lib/postgresql/data # 持久化數據
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"] # 檢查 Postgres 健康
      interval: 2s # 每 5 秒檢查一次
      timeout: 5s # 超時 5 秒
      retries: 10 # 重試 5 次
      start_period: 10s

  # Redis 服務
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"

  # Prisma 服務，負責遷移同生成
  prisma:
    build:
      context: .
      dockerfile: packages/prisma/Dockerfile.prisma
    volumes:
      - ./packages/prisma:/app/packages/prisma # 只映射 prisma 源碼
      - prisma_generated:/app/packages/prisma/generated # 共享生成嘅 client
    depends_on:
      prisma-base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy # 等 Postgres 健康後啟動
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/mydb?schema=public
    command: >
      sh -c "pnpm run migrate:dev --name init && pnpm run build"

  # API 服務（NestJS）
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.dev
    volumes:
      - ./apps/api/src:/app/apps/api/src
      - ./apps/api/nest-cli.json:/app/apps/api/nest-cli.json
      - prisma_generated:/app/packages/prisma/generated # 用 prisma 生成嘅 client
    ports:
      - "4000:4000"
    depends_on:
      prisma-base:
        condition: service_completed_successfully
      prisma:
        condition: service_completed_successfully # 等 prisma 生成 client
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:password@postgres:5432/mydb?schema=public
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    develop:
      watch:
        - action: sync # 同步 api 源碼改動
          path: ./apps/api/src
          target: /app/apps/api/src
        - action: sync # 同步 prisma 生成嘅 client
          path: ./packages/prisma/generated
          target: /app/packages/prisma/generated

  # CMS 服務（Next.js）
  cms:
    build:
      context: .
      dockerfile: apps/cms/Dockerfile.dev
    volumes:
      - ./apps/cms:/app/apps/cms # 只映射 cms 源碼
      - ./packages/ui:/app/packages/ui # 只映射 ui 源碼
      - prisma_generated:/app/packages/prisma/generated # 用 prisma 生成嘅 client
    ports:
      - "3000:3000"
    depends_on:
      prisma-base:
        condition: service_completed_successfully
      prisma:
        condition: service_completed_successfully # 等 prisma 生成 client
      ui-base:
        condition: service_completed_successfully
      api:
        condition: service_started
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://api:4000
      - NEXT_PUBLIC_BASE_PATH=/absproxy/3000
    develop:
      watch:
        - action: sync # 同步 cms 源碼改動
          path: ./apps/cms/src
          target: /app/apps/cms/src
        - action: sync # 同步 ui 源碼改動
          path: ./packages/ui/src
          target: /app/packages/ui/src
        - action: rebuild # 如果 package.json 改咗，重建
          path: ./apps/cms/package.json

# 共享 volume
volumes:
  postgres_data:
  redis_data:
  prisma_generated: